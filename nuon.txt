sql-like graph query language:

-- creates 2 nodes labeled "person"
-- connect p and q by an edge labeled "knows"

CREATE person p, movie m SET p.name = "Matthew", p.age = 25, m.title = "Fight Club", p -> q AS "favorite film"

-- returns all nodes with label "person"
-- each row is a single person record
-- row 1: {name: "Matthew", age: 25}

SELECT person p RETURN p

-- returns all nodes with label "person", and all nodes with label "movie"
-- this is equivalent to a cross join from p to m
-- in a graph with 2 people, and two movies, the return would look like this
-- row 1: [{name: "Matthew", age: 25}, {title: "Fight Club"}]
-- row 2: [{name: "Matthew", age: 25}, {title: "The Breakfast Club"}]
-- row 3: [{name: "Jordan", age: 23}, {title: "Fight Club"}]
-- row 4: [{name: "Jordan", age: 23}, {title: "The Breakfast Club"}]

SELECT person p, movie m RETURN p, q

-- returns all nodes with label "person"
-- same as above, except no movie details are returned
-- this is to further demonstrate the cross join semantics here
-- this is equivalent to a cross join from p to m
-- in a graph with 2 people, and two movies, the return would look like this
-- row 1: [{name: "Matthew", age: 25}]
-- row 2: [{name: "Matthew", age: 25}]
-- row 3: [{name: "Jordan", age: 23}]
-- row 4: [{name: "Jordan", age: 23}]

SELECT person p, movie m RETURN p

-- same as above, just with conditions

SELECT person p, movie m WHERE p.name = "Matthew" AND m.title = "Fight Club" RETURN p, m

-- return all nodes labeled "person" with a property "name" valued "matthew" that have an edge labeled "favorite film" to a node labeled "movie"
-- this is equivalent to an inner join of node types "person" and "movie" on "favorite film"

SELECT person p, movie m WHERE p.name = "Matthew" AND p -> m AS "favorite film" RETURN p, m

-- return all nodes labeled "person" with a property "name" valued "matthew" that have an edge to a node labeled "movie"
-- same as above except the edge between "person" and "movie" can have any label

SELECT person p, movie m WHERE p.name = "Matthew" AND p -> m RETURN p, m

-- return all nodes labeled "person" with a property "name" valued "matthew" that have an edge to a node labeled "movie" that have an edge to a node labeled "oscar"

SELECT person p, movie m, oscar o WHERE p.name = "Matthew" AND p -> m AND m -> o RETURN p, m, o

-- return all nodes labeled "person" with a property "name" valued "matthew" and resolve any edges labeled "favorite film", regardless of node label
-- another inner join, except a node with any label is accepted
-- in a graph with 2 people, 1 of which has an edge labeled "favorite film", the return would look like this
-- row 1: [{name: "Matthew", age: 25}, {title: "Fight Club"}]

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n AS "favorite film" RETURN p, n

-- same as above, except all edges are resolved, regardless of label

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n RETURN p, n

-- same as above, except the relationship is optional (note the ?)
-- this makes it a left outer join
-- in a graph with 2 people, 1 of which has an edge labeled "favorite film", the return would look like this
-- row 1: [{name: "Matthew", age: 25}, {title: "Fight Club"}]
-- row 2: [{name: "Jordan", age: 23}]

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n? AS "favorite film" RETURN p, n

-- same as above, except all edges (if they exist) are resolved
-- another left outer join

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n? RETURN p, n


-- instead of RETURN, SET can be used to update SELECTed nodes

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n? SET p.property = "value", n.property = "value"

============================= ALL QUERIES (for brevity) =============================

CREATE person p, movie m SET p.name = "Matthew", p.age = 25, m.title = "Fight Club", p -> q AS "favorite film";

SELECT person p RETURN p;

SELECT person p, movie m WHERE p.name = "Matthew" AND m.title = "Fight Club" RETURN p, m;

SELECT person p, movie m WHERE p.name = "Matthew" AND p -> m AS "favorite film" RETURN p, m;

SELECT person p, movie m WHERE p.name = "Matthew" AND p -> m RETURN p, m;

SELECT person p, movie m, oscar o WHERE p.name = "Matthew" AND p -> m AND m -> o RETURN p, m, o;

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n AS "favorite film" RETURN p, n;

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n RETURN p, n;

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n? AS "favorite film" RETURN p, n;

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n? RETURN p, n;

SELECT person p, NODE n WHERE p.name = "Matthew" AND p -> n? SET p.property = "value", n.property = "value";

=====================================================================================
